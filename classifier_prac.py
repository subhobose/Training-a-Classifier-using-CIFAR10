# -*- coding: utf-8 -*-
"""Classifier_prac.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11p3_VbjL_rfAqYwS_uHeOI7Igf0xWsl3
"""

import torch
import numpy as np

shape = (2,3,)
ones_tensor = torch.ones(shape)
data = [[1,2], [3,4], [5,6]]
dataTensor = torch.tensor(data)
print(dataTensor[1,1])

import torch 
from torchvision.models import resnet18, ResNet18_Weights

model = resnet18(weights = ResNet18_Weights.DEFAULT)
data = torch.rand(1, 3, 64, 64)
# print(data)
labels = torch.rand(1, 1000)

#forward pass
predict = model(data)

#calculate loss
loss = (predict-labels).sum()
loss.backward()

#call optimizer
optim = torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.9)

#initiate gradient descent
optim.step()

#defined neural network

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim


class Net(nn.Module):

    def __init__(self):
        super(Net, self).__init__()
        # 1 input image channel, 6 output channels, 5x5 square convolution
        # kernel
        self.conv1 = nn.Conv2d(1, 6, 5)
        self.conv2 = nn.Conv2d(6, 16, 5)
        # an affine operation: y = Wx + b
        self.fc1 = nn.Linear(16 * 5 * 5, 120)  # 5*5 from image dimension
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        # Max pooling over a (2, 2) window
        x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2))
        # If the size is a square, you can specify with a single number
        x = F.max_pool2d(F.relu(self.conv2(x)), 2)
        x = torch.flatten(x, 1) # flatten all dimensions except the batch dimension
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x


net = Net()
#print(net)

input = torch.randn(1, 1, 32, 32)

#forward pass
out = net(input)
# print(out)

#zeroing gradients
net.zero_grad()
out.backward(torch.randn(1, 10))

#loss function loss(output, target)
target = torch.randn(1, 10)
# print(target)
target = target.view(1, -1)
# print(target)
lossFunc = nn.MSELoss()

loss = lossFunc(out, target)
print(loss)

#called backprop
loss.backward()

#optimizer created
optimizer = optim.SGD(net.parameters(), lr=0.01)

optimizer.zero_grad()
optimizer.step()

#training classifier - load and normalize dataset

#input data - 3 channels, 32x32

import torch
import torchvision
import torchvision.transforms as transforms

import matplotlib.pyplot as plt
import numpy as np


transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

sampleSize = 4

trainSet = torchvision.datasets.CIFAR10(root = './data', train = True, download = True, transform = transform)

trainLoader = torch.utils.data.DataLoader(trainSet, batch_size = sampleSize, shuffle = True, num_workers = 2)

testSet = torchvision.datasets.CIFAR10(root = './data', train = False, download = True, transform = transform)

testLoader = torch.utils.data.DataLoader(testSet, batch_size = sampleSize, shuffle = False, num_workers = 2)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

import matplotlib.pyplot as plt
import numpy as np

# func to show image

def imshow(img):
  img = img/2 + 0.5
  npimg = img.numpy()
  plt.imshow(np.transpose(npimg, (1, 2, 0)))
  plt.show()


dataiter = iter(trainLoader)
images, labels = next(dataiter)
print(len(trainLoader))

# show images
imshow(torchvision.utils.make_grid(images))
print(' '.join(f'{classes[labels[j]]:5s}' for j in range(sampleSize)))

#defined neural network

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim


class Net(nn.Module):

    def __init__(self):
        super(Net, self).__init__()
        # 1 input image channel, 6 output channels, 5x5 square convolution
        # kernel
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        # an affine operation: y = Wx + b
        self.fc1 = nn.Linear(16 * 5 * 5, 120)  # 5*5 from image dimension
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        # Max pooling over a (2, 2) window
        x = self.pool(F.relu(self.conv1(x)))
        # If the size is a square, you can specify with a single number
        x = self.pool(F.relu(self.conv2(x)))
        x = torch.flatten(x, 1) # flatten all dimensions except the batch dimension
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

net = Net()

#define loss function
lossFunc = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)

#training the network
loss_values = []
for epoch in range(5):

  running_loss = 0.0
  for i, data in enumerate(trainLoader, 0):
    inputs, labels = data

    #1. zero parameter grad
    optimizer.zero_grad()

    #2. Forward pass
    outputs = net(inputs)

    #3. calc loss function
    loss = lossFunc(outputs, labels)

    #4. Backward pass
    loss.backward()

    #5. Update gradients
    optimizer.step()

    #stats
    running_loss += loss.item() * inputs.size(0)
    #print(loss.item())
    # if i%2000 == 1999:
    #   print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
    #   running_loss = 0.0
  loss_values.append(running_loss/len(trainLoader))

print(loss_values)
plt.plot(loss_values)
  
print('Finished Training')

#sample loop
loss_values = []
for epoch in range(5):
  running_loss = 0.0
  for i, data in enumerate(trainLoader, 0):
    inputs, labels = data
    outputs = net(inputs)
    loss = lossFunc(outputs, labels)
    running_loss += loss.item() * inputs.size(0)
  loss_values.append(running_loss/len(trainLoader))
  print(running_loss)
  print(loss_values)
plt.plot(loss_values)

#saving model

PATH = './cifar_net.pth'
torch.save(net.state_dict(), PATH)

#test on test data
dataiter = iter(testLoader)
images, labels = next(dataiter)

print(labels)
imshow(torchvision.utils.make_grid(images))
print('Ground Truth:', ' '.join(f'{classes[labels[j]]:5s}' for j in range(4)))

#loaded saved model
net = Net()
net.load_state_dict(torch.load(PATH))

#predicted by model
outputs = net(images)
print(outputs.data)
_, predicted = torch.max(outputs, 1)
print(_)
print(predicted)
print('Predicted: ', ''.join(f'{classes[predicted[j]]:5s}' for j in range(4)))

# accuracy over the whole dataset
correct= 0
total = 0

with torch.no_grad():
  for data in testLoader:
    images, labels = data

    outputs = net(images)
    _, predicted = torch.max(outputs.data, 1)
    total += labels.size(0)
    correct += (predicted == labels).sum().item()

print(f'Accuracy of the network on the 10000 test images: {100 * correct // total} %')

# classes that performed well
correct_pred = {classname: 0 for classname in classes}
total_pred = {classname: 0 for classname in classes}

# print(correct_pred)

with torch.no_grad():
  for data in testLoader:
    images, labels = data
    outputs = net(images)
    _, predictions = torch.max(outputs.data, 1)

    for label, predict in zip(labels, predictions):
      if label == predict:
        correct_pred[classes[label]] += 1
      total_pred[classes[label]] += 1

#print accuracy for each class
for classname, correct_count in correct_pred.items():
  accuracy = 100* float(correct_count) / total_pred[classname]
  print(f'Accuracy for class: {classname:5s} is {accuracy:.1f} %')